rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // USER PROFILES - Only owner can access their own data
    // ========================================
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow read access to public profile data for search functionality
      allow read: if request.auth != null && 
        resource.data.keys().hasAll(['publicProfile']) &&
        request.query.limit <= 20; // Limit search results
    }

    // ========================================  
    // CIRCLE MEMBERSHIPS - Owner and member access only
    // ========================================
    match /userCircles/{membershipId} {
      allow read: if request.auth != null && 
        (resource.data.ownerUid == request.auth.uid || 
         resource.data.memberUid == request.auth.uid);
         
      allow write: if request.auth != null && 
        resource.data.ownerUid == request.auth.uid;
        
      allow create: if request.auth != null && 
        request.resource.data.ownerUid == request.auth.uid;
        
      allow delete: if request.auth != null && 
        resource.data.ownerUid == request.auth.uid;
    }

    // ========================================
    // RATINGS - Rater and rated user access
    // ========================================  
    match /ratings/{ratingId} {
      // Read: Both rater and rated user can see the rating
      allow read: if request.auth != null && 
        (resource.data.raterUid == request.auth.uid || 
         resource.data.ratedUid == request.auth.uid);
         
      // Write: Only the rater can create/update their own ratings
      allow write: if request.auth != null && 
        resource.data.raterUid == request.auth.uid;
        
      // Create: User can only create ratings where they are the rater
      allow create: if request.auth != null && 
        request.resource.data.raterUid == request.auth.uid;
        
      // Delete: Only rater can delete their own ratings  
      allow delete: if request.auth != null && 
        resource.data.raterUid == request.auth.uid;
    }

    // ========================================
    // NOTIFICATIONS - Only recipient access
    // ========================================
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
        resource.data.recipientUid == request.auth.uid;
        
      allow create: if request.auth != null && 
        request.resource.data.recipientUid == request.auth.uid;
    }

    // ========================================
    // CUSTOM CIRCLES - Premium feature protection
    // ========================================
    match /customCircles/{circleId} {
      // Read: Owner and members can read
      allow read: if request.auth != null && 
        (resource.data.ownerUid == request.auth.uid ||
         request.auth.uid in resource.data.memberUids);
         
      // Write: Only owner can modify
      allow write: if request.auth != null && 
        resource.data.ownerUid == request.auth.uid;
        
      // Create: Only premium users can create (additional validation in app logic)
      allow create: if request.auth != null && 
        request.resource.data.ownerUid == request.auth.uid;
        
      // Delete: Only owner can delete
      allow delete: if request.auth != null && 
        resource.data.ownerUid == request.auth.uid;
    }

    // ========================================
    // CUSTOM CIRCLE MEMBERSHIPS
    // ========================================
    match /customCircleMemberships/{membershipId} {
      // Read: Circle owner and the member can read
      allow read: if request.auth != null && 
        (resource.data.circleOwnerUid == request.auth.uid || 
         resource.data.memberUid == request.auth.uid);
         
      // Write: Only circle owner can manage memberships
      allow write: if request.auth != null && 
        resource.data.circleOwnerUid == request.auth.uid;
        
      // Create: Circle owner can invite members
      allow create: if request.auth != null && 
        request.resource.data.circleOwnerUid == request.auth.uid;
        
      // Delete: Circle owner can remove members
      allow delete: if request.auth != null && 
        resource.data.circleOwnerUid == request.auth.uid;
    }

    // ========================================
    // USER CIRCLE TRAITS - Premium customization
    // ========================================
    match /userCircleTraits/{userCircleId} {
      // Read: Only the user who owns the traits
      allow read: if request.auth != null && 
        userCircleId.split('_')[0] == request.auth.uid;
        
      // Write: Only the trait owner (premium users)
      allow write: if request.auth != null && 
        userCircleId.split('_')[0] == request.auth.uid;
        
      // Create: User can create their own trait customizations
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
        
      // Delete: User can delete their own customizations
      allow delete: if request.auth != null && 
        userCircleId.split('_')[0] == request.auth.uid;
    }

    // ========================================
    // FAMILY GOALS - Premium feature
    // ========================================
    match /familyGoals/{goalId} {
      // Read: Only the goal creator
      allow read: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
        
      // Write: Only the goal creator
      allow write: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
        
      // Create: User can create their own goals
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
        
      // Delete: User can delete their own goals
      allow delete: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
    }

    // ========================================
    // REVEAL REQUESTS - Attraction feature
    // ========================================
    match /revealRequests/{requestId} {
      // Read: Requester and target can read
      allow read: if request.auth != null && 
        (resource.data.requesterUid == request.auth.uid || 
         resource.data.targetUid == request.auth.uid);
         
      // Write: Requester can create, target can respond
      allow write: if request.auth != null && 
        (resource.data.requesterUid == request.auth.uid || 
         resource.data.targetUid == request.auth.uid);
         
      // Create: User can create reveal requests
      allow create: if request.auth != null && 
        request.resource.data.requesterUid == request.auth.uid;
    }

    // ========================================
    // ADMIN-ONLY COLLECTIONS (if any)
    // ========================================
    match /admin/{document=**} {
      // Restrict to admin users only (implement admin role checking)
      allow read, write: if false; // Disable for now, implement admin roles later
    }

    // ========================================
    // DENY ALL OTHER ACCESS
    // ========================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
